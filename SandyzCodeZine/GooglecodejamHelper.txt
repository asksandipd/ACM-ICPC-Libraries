
int bitc(ll r) {return r == 0 ? 0 : (bitc(r>>1) + (r&1));}
ll gcd(ll x, ll y) {return x ? gcd(y%x,x) : y;}

template<class T> T& operator >?= (T& x, T y) {if(y>x) x=y; return x;}
template<class T> T& operator <?= (T& x, T y) {if(y<x) x=y; return x;}
template<class T> T operator >? (T x, T y) {return x>y?x:y;}
template<class T> T operator <? (T x, T y) {return x<y?x:y;}



BINARY SEARCH KAWIGI
STFAN POCHMANN SUBSET SUM and 1 << j funda
DOUBLE PRECISION\FLOAT COMPARIONS-TOPCODER FORUMS
DFS Serach Krijgertje, Bmerry soltuons
CHESS BOUNDS FORMULA AND TRICSK





sort(v1.begin(), v1.end());
sort(v2.begin(), v2.end(), greater<int>());
long long ret = 0;
for (int i = 0; i < n; i++)
  ret += (long long)(v1[i]) * v2[i];




Using the following steps, we can quickly find whether a solution exists, and if so, what the solution is. 


Start with every flavor unmalted and consider the customers one by one. 
If there is an unsatisfied customer who only likes unmalted flavors, and all those flavors have been made malted, then no solution is possible. 
If there is an unsatisfied customer who has one favorite malted flavor, then we must make that flavor malted. We do this, then go back to step 2. 
If there are no unsatisfied customers, then we already have a valid solution and can leave the remaining flavors unmalted


#include <cstdio>
#include <cstring>
using namespace std;

const int MAX = 5, MOD = 1000;


template <typename T> struct matrix
{
    int R, C;
    T nums [MAX][MAX];

    inline matrix (int n = 0)
    {
        R = C = n;
        memset (nums, 0, sizeof (nums));
    }

    inline matrix (int r, int c)
    {
        R = r; C = c;
        memset (nums, 0, sizeof (nums));
    }

    inline void iden ()
    {
        memset (nums, 0, sizeof (nums));

        for (int i = 0; i < R; i++)
            nums [i][i] = 1;
    }

    inline matrix operator * (const matrix &right)
    {
        matrix prod (R, right.C);

        for (int i = 0; i < R; i++)
            for (int j = 0; j < right.C; j++)
                for (int k = 0; k < C; k++)
                    prod.nums [i][j] = (prod.nums [i][j] + nums [i][k] * right.nums [k][j]) % MOD;

        return prod;
    }

    inline matrix power (long long p)
    {
        matrix result (R), temp = *this;
        result.iden ();

        while (p > 0)
        {
            if (p & 1) result = result * temp;
            temp = temp * temp;
            p >>= 1;
        }

        return result;
    }

    inline void print ()
    {
        for (int i = 0; i < R; i++)
            for (int j = 0; j < C; j++)
                printf ("%lld%c", (long long) nums [i][j], (j + 1 < C) ? ' ' : '\n');
    }
};

matrix <int> m;

=======================================================
inline int fib (int n)
{
    m.R = m.C = 2;
    m.nums [0][0] = m.nums [0][1] = m.nums [1][0] = 1;
    m.nums [1][1] = 0;

    m = m.power (n);

    return m.nums [0][1];
}

inline int fastpow (int a, int b)
{
    int p = 1;

    while (b > 0)
    {
        if (b & 1) p = p * a % MOD;
        a = a * a % MOD;
        b >>= 1;
    }

    return p;
}


=========================================================
        for (int i = 0; i < N; i++)
            printf ("%c%c", malt [i] ? '1' : '0', i < N - 1 ? ' ' : '\n');

 if (bad)
        {
            printf ("IMPOSSIBLE\n");
            continue;
        }




int found = -1;
 do
        {
            found = -1;

            for (int i = 0; i < M; i++)
                if (like [i].size () == 1 && like [i][0] % 2 == 1 && !malt [like [i][0] / 2])
                    found = like [i][0] / 2;

            malt [found] = true;
            remove (found);
        }
        while (found != -1);

for (int c = 0; c < C; c++)
    {
        memset (malt, false, sizeof (malt));
        scanf ("%d %d", &N, &M);

        for (int i = 0, t; i < M; i++)
        {
            like [i].clear ();
            scanf ("%d", &t);

            for (int j = 0, x, y; j < t; j++)
            {
                scanf ("%d %d", &x, &y); x--;
                like [i].push_back (2 * x + y);
            }
        }


====================================================================
void remove (int num)
{
    for (int i = 0; i < M; i++)
        for (int j = 0; j < (int) like [i].size (); j++)
            if (like [i][j] == 2 * num)
            {
                swap (like [i][j], like [i][like [i].size () - 1]);
                like [i].pop_back ();
            }
}


=================================================================
int main()
{

printf("\n");

return 0;
}

===========================
while(true)
{ 
   bool found  = false;
  

if(!found) break;
if(!possible) break;

}


=============================
__int64 i,j,t,result;
	fscanf(fin,"%I64d",&t);


void SortLongLongArray(__int64 a[])
{
	__int64 i,j,k;
	for (i=2; i<=n; i++)
	{
		j=i-1;
		k=a[i];
		while ((j>=1)&&(k<a[j]))
		{
			a[j+1]=a[j];
			--j;
		}
		a[j+1]=k;
	}
}


===================================
const long maxn = 2010;
const long maxm = 2010;

struct Tdf{
	long x,y;
}*df[maxm+1];

long deg[maxm+1],result[maxn+1],n,m;

==================================


Sample code in C++, where st is the set of queries in the current segment, q is the next query, and count is the number of switches. 

st.clear();
count = 0;
for (int i=0; i<Q; i++) {
  getline(cin, q);
  if (st.find(q) == st.end()) {
    if (st.size() == S-1) {
      st.clear();
      count++;
    }
    st.insert(q);
  }
}
If st is a hashset, you expect the solution run in O(n) time. Note that this solution uses the fact that each query will be a search engine name and so we can ignore the list of names provided in the input. 


Let us justify that the greedy approach always gives the optimal answer. Think of the procedure as Q steps, and we want to show that, for each i, there is (at least) one optimal choice which agrees with us on the first i steps. We do this inductively for i = 0, then i = 1, and so on. The proposition for i = Q when proven true will imply that our algorithm is correct. 

So, the key points in the inductive step i:


If adding the next query will explode the universe, we must start a new segment. Any optimal choice agrees with us for the first (i-1) steps must also do that. 
If adding the next query will not explode the universe, we do not start a new segment. We know there is an optimal solution R agreed with us for (i-1) steps. Even if in R a new segment is started at step i, we can modify it a little bit. Let R' be the plan that agrees with R, but instead of starting a new segment on the i-th step, we delay this to the (i+1)st. It is clear that R' will also make the universe safe, and has no more switches than R does. So, R' is also an optimal solution, and agrees with our choice for the first i steps

=============================================================
INtersection Area between a cirle and a small square.

This solution takes O(S2) time, where S is the number of vertical strings of the racquet. It's not hard to come up with an O(S) solution because there are at most 4S border squares which can be found efficiently, but the previous solution was fast enough. 

Instead of solving the problem exactly, an iterative solution which approximates the area to the needed precision would have also worked. One such solution uses divide and conquer by splitting the square into four smaller squares and then checking the simple cases where the squares are totally inside or totally outside the square. In the cases where the circle and square intersect just recurse if the current square is larger than some chosen precision. An observation is that we can divide every length by the radius of the racquet because it gets canceled in the division between the area of the gaps in the racquet and the disc area. This observation helps the iterative solution since we can make the number of iterations smaller. Here's some sample code: 





double intersection(double x1, double y1,
                    double x2, double y2) {
  // the normalized radius is 1
  if (x1*x1 + y1*y1 > 1) {
    return 0;
  }
  if (x2*x2 + y2*y2 < 1) {
    return (x2-x1) * (y2-y1);
  }
  // EPS2 = 1e-6 * 1e-6
  if ((x2-x1)*(y2-y1) < EPS2) {
    // this trick helps in doing 10 or 100 times less
    // iterations than we would need to get the same
    // precision if we just return 0;
    return (x2-x1) * (y2-y1) / 2;
  }
 
  double mx = (x1 + x2) / 2;
  double my = (y1 + y2) / 2;
 
  return intersection(x1, y1, mx, my) +
    intersection(mx, y1, x2, my) +
    intersection(x1, my, mx, y2) +
    intersection(mx, my, x2, y2);
}

===========================================================
printf("Case #%d: %.6lf\n", prob++, 1.0 - ar / (PI*R*R/4));


#include <stdio.h>
#include <string.h>
#include <math.h>

double pi = acos(-1.0);

double f, r, t, R, g;

bool inCircle(double x, double y, double R) {
	return x * x + y * y <= R * R;
}

double func(double R, double t) {
	return sqrt(R * R - t * t);
}

double func2(double R, double x) {
	if (x > R - 1e-10) {
		return pi / 2;
	}
	return atan(x / func(R, x));
}

double area(double R, double x1, double x2, double y) {
//	return (x2 * func(R, x2) - x1 * func(R, x1) + R * R * (func2(R, x2) - func2(R, x1))) / 2 - (x2 - x1) * y;
	double t = (x2 * func(R, x2) - x1 * func(R, x1) + R * R * (func2(R, x2) - func2(R, x1))) / 2 - (x2 - x1) * y;
	double y1 = func(R, x1);
	double y2 = func(R, x2);
	double x = x1 * y2 / y1;
	double t2 = R * R * (acos(x1 / R) - acos(x2 / R)) / 2 - (x2 - x) * y2 / 2 - (x1 - x) * (y1 - y2) / 2 + (y2 - y) * (x2 - x1);
	return t2;
}

double getArea(double x, double y, double l) {
	if (inCircle(x + l, y + l, R)) return l * l;
	double t1, t2;
	if (inCircle(x, y + l, R)) {
		if (inCircle(x + l, y, R)) {
			t1 = func(R, y + l);
			t2 = func(R, x + l);
			return (t2 - y) * l + (t1 - x) * (y + l - t2) + area(R, t1, x + l, t2);
		}
		else {
			t1 = func(R, y + l);
			t2 = func(R, y);
			return (t1 - x) * l + area(R, t1, t2, y);
		}
	}
	else {
		if (inCircle(x + l, y, R)) {
			return area(R, x, x + l, y);
		}
		else {
			t2 = func(R, y);
			return area(R, x, t2, y);
		}
	}
	return 0;
}

double getProb() {
	double p = 0, total;
	if (R - t - f < 1e-8) return 1;
	total = pi * R * R;
	r += f;
	g -= 2 * f;
	if (g < 1e-8) return 1;
	R -= t + f;
	double x, y, tx, ty;
	x = y = r;
	while (inCircle(x, y, R)) {
		tx = x;
		ty = y;
		while (inCircle(tx, ty, R)) {
			p += getArea(tx, ty, g);
			ty += g + 2 * r;
		}
		x += g + 2 * r;
	}
	return 1 - 4 * p / total;
}

int main() {
	freopen("C.in", "r", stdin);
	freopen("C.out","w",stdout);
	int testcases, k;
	scanf("%d", &testcases);
	for (k = 0; k < testcases; k++) {
		scanf("%lf %lf %lf %lf %lf", &f, &R, &t, &r, &g);
		printf("Case #%d: %.9lf\n", k + 1, getProb());
	}
	return 0;
}


==================================================================================================
#include <stdio.h>
#include <string.h>

char str1[100], str2[100];

int getTime(char str[]) {
	int i, j;
	sscanf(str, "%d:%d", &i, &j);
	return i * 60 + j;
}

void swap(int &a, int &b) {
	int c = a;
	a = b;
	b = c;
}


=========================================================================================
map<string, int> ff;

char str[1000];
int a[1000], b[1000];

int main() {
  freopen("a.in","r",stdin);
  int i, j, k, r, t, n, m, testcases;
  scanf("%d",&testcases);
  for (t = 1; t <= testcases; t++) {
    scanf("%d",&n);
    gets(str);
    ff.clear();
    for (i = 0; i < n; i++) {
      gets(str);
      ff[str] = i;
    }
..............................

 for (i = 0; i < n; i++) if (a[i] < j) j = a[i];
    printf("Case #%d: %d\n", t, j);
  }
  return 0;
}


================================================================================
double absol(double x)
{
       if(x < 0)
       return (-x);
       else
       return x;
}

USE ABOVE IN if(pos > (R-t))
       {
        return 0.0f;
       }
       return absol(pos*sqrt((R-t)*(R-t)-(pos*pos))/2 - (((R-t)*(R-t)*acos(pos/(R-t)))/2));

=========================================================================
char buf[110];
const int inf = 1000000000;

int main() {
	int zzz;
	gets(buf);
	sscanf(buf, "%d", &zzz);
	REP(zz,zzz) {
		map<string,int> num;
		int s;
		gets(buf);
		sscanf(buf, "%d", &s);
		REP(i,s) {
			gets(buf);
			num[buf] = i;
		}
		int q;
		gets(buf);
		sscanf(buf, "%d", &q);

gets(buf);
			int k = num[buf];
			mil[0] = inf;
			REP(j,s-1)
				mil[j+1] = mil[j] <? res[j];
			mir[s-1] = inf;

=======================================================================
KRIJGERTJE sol1

#include<cstdio>
#include<map>
#include<string>
using namespace std;

#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define REP(i,n) FOR(i,0,n)
#define FORE(i,a,b) for(int i=(a);i<=(b);++i)
#define REPE(i,n) FORE(i,0,n)

typedef long long ll;
typedef pair<ll,ll> bits;
#define SZ(v) ((int)(v).size())
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define REP(i,n) FOR(i,0,n)
#define FORE(i,a,b) for(int i=(a);i<=(b);++i)
#define REPE(i,n) FORE(i,0,n)
#define REPSZ(i,v) REP(i,SZ(v))

char buff[1000];

int n,nq;
map<string,int> name2id;

inline void setbit(pair<ll,ll> &bits,int ind) {
	if(ind<64) bits.first|=1LL<<ind; else bits.second|=1LL<<(ind-64);
}

void run(int casenr) {
	name2id.clear();
	gets(buff);
	sscanf(buff,"%d",&n);
	assert(n<=128);
	REP(i,n) {
		gets(buff);
		name2id[string(buff)]=i;
	}
	gets(buff);
	sscanf(buff,"%d",&nq);
	int ret=0;
	bits cur,all;
	REP(i,n) setbit(all,i);
	REP(i,nq) {
		gets(buff);
		assert(name2id.count(buff));
		int id=name2id[string(buff)];
		setbit(cur,id);
//		printf("%llx,%llx\n",cur.first,cur.second);
		if(cur==all) {
			++ret;
			cur=pair<ll,ll>();
			setbit(cur,id);
		}
	}
	printf("Case #%d: %d\n",casenr,ret);
}

int main() {
	gets(buff);
	int n; sscanf(buff,"%d",&n);
	FORE(i,1,n) run(i);
	return 0;
}


===========================================================================================================
KRIJGERTJE SOl:TIME RELATED CALUCLATIONS = HH:MM format

int turnaround;
int na,nb;
vector<int> froma,tob;
vector<int> fromb,toa;

void run(int casenr) {
	scanf("%d%d%d",&turnaround,&na,&nb);
	froma=tob=vector<int>(na); // INITIALIZE VERCTORS IN THE METHOD ---------------------------------------------------IMPORTNAT
	REP(i,na) { froma[i]=readtime(); tob[i]=readtime(); }
	fromb=toa=vector<int>(nb);
	REP(i,nb) { fromb[i]=readtime(); toa[i]=readtime(); }
	
	int reta=calc(froma,toa);
	int retb=calc(fromb,tob);
	printf("Case #%d: %d %d\n",casenr,reta,retb);
}

int readtime() {
	int h,m; scanf("%d:%d",&h,&m);
	return h*60+m;
}

=============================================================================================
#include<cstdio>
#include<algorithm>
#include<iostream>
#include<sstream>
#include<string>
#include<vector>
#include<set>
#include<map>
#include<numeric>
#include<cmath>
using namespace std;

#define ALL(t) t.begin(),t.end()
#define FOR(i,n) for (int i=0;i<(int)(n);i++)
#define FOREACH(i,t) for (typeof(t.begin())i=t.begin();i!=t.end();i++)
typedef vector<int> vi;
typedef long long int64;

char buf[1000000];
main(){
  int c,s,q;
  gets(buf);
  sscanf(buf,"%d",&c);
  for(int cc=1;cc<=c;cc++){
    gets(buf);
    sscanf(buf,"%d",&s);
    map<string,int> nr;
    FOR(i,s)gets(buf),nr[buf]=i;
    gets(buf);
    sscanf(buf,"%d",&q);
    int m[110];
    FOR(i,s)m[i]=0;
    FOR(i,q){
      gets(buf);
      int next=nr[buf],best=*min_element(m,m+s);
      FOR(j,s)m[j]<?=best+1;      
      m[next]=1000000;
    }
    printf("Case #%d: %d\n",cc,*min_element(m,m+s));
  }
}


==========================================================================================
KRIJGERTJE GEOMETRICAL PRECiSION:

	printf("Case #%d: %.10lf\n",casenr,1.0-4*num/den);
}

int main() {
	int n; scanf("%d",&n);
	FORE(i,1,n) run(i);
	return 0;
}


assert(y1<=y3&&y3<=y2&&x1<=x3&&x3<=x2);

double z=R-t-f;
	double areafull=2*f<=g?(g-2*f)*(g-2*f):0;
	double num=0,den=M_PI*R*R;

typedef struct P {
	double x,y;
	P() {}
	P(double x,double y):x(x),y(y) {}
} P;
P operator-(const P &A,const P &B) { return P(A.x-B.x,A.y-B.y); }
double operator^(const P &A,const P &B) { return A.x*B.y-A.y*B.x; }

double f,R,t,r,g;

double sdarea(const P &A,const P &B,const P &C) {
	return (B-A)^(C-A);
}

double area(const P &A,const P &B,const P &C) {
	return fabs(sdarea(A,B,C))/2;
}


================================================================================================
int C[1024][128];

int main(){
//freopen("input.txt" ,"r",stdin );
//freopen("A-small.in" ,"r",stdin );
freopen("A-large.in" ,"r",stdin );
freopen("output.txt","w",stdout);
    int T;cin>>T;
    REP(tc,T){
        cout<<"Case #"<<tc+1<<": ";
        int N,M;
        scanf("%d\n",&N);
        char buf[1024];
        vector<string> S(N);
        FORV(j,S){
            gets(buf);
            S[j]=buf;
        }
        scanf("%d\n",&M);
        vector<string> Q(M);
        FORV(i,Q){
            gets(buf);
            Q[i]=buf;
        }
        FORV(j,S)
            C[0][j]=(S[j]==Q[0]);
        FOR(i,1,sz(Q))
            FORV(j,S){
                C[i][j]=INF;
                if(S[j]!=Q[i])
                    C[i][j]=C[i-1][j];
                else
                    FORV(k,S)
                        if(k!=j)
                            C[i][j]<?=C[i-1][k]+1;
            }
        int ANS=INF;
        FORV(i,S)
            ANS<?=C[sz(Q)-1][i];
        cout<<ANS<<endl;
    }
    return 0;
}


===========================================================================================
#include<algorithm>
#include<iostream>
#include<numeric>
#include<complex>
#include<sstream>
#include<cstdio>
#include<string>
#include<vector>
#include<cmath>
#include<queue>
#include<list>
#include<set>
#include<map>
using namespace std;

//===============================SHORTENINGS====================================
typedef long long int64;
typedef pair<int,int> PII;
#define X first
#define Y second
typedef vector<int> VI;
typedef vector<PII> VPII;
typedef vector<VI> VVI;
#define VAR(a,b) __typeof(b) a=(b)
template<typename T> T inline sqr(T q){return q*q;}
#define sz(X) ((int)(X).size())
#define pb push_back
#define ALL(c) (c).begin(),(c).end()
#define SORT(c) sort(ALL(c))
#define REVERSE(c) reverse(ALL(c))
#define UNIQUE(c) (c).resize(unique(ALL(c))-(c).begin())
//===============================CONSTANTS======================================
const int INF=1000000001;
const int64 INF64=sqr((int64)INF);
const double EPS=1E-7;
//=================================LOOPS========================================
#define FOR(I,S,N) for(int I=S;I<N;I++)
#define REP(I,N) FOR(I,0,N)
#define FORD(I,S,N) for(int I=S;I>=N;I--)
#define FORV(i,v) FOR(i,0,sz(v))
#define FOREACH(it,c) for(VAR(it,(c).begin());it!=(c).end();++it)

====================================================================================================
string s;
  getline(cin, s);
  no_tests = atoi(s.c_str());



=====================================================
#include <iostream>  TRIANGLES
using namespace std;

main() {
  int N, prob = 1;
  for (cin >> N; N--;) {
    int x1, y1, x2, y2, x3, y3;
    cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;
    cout << "Case #" << prob++ << ": ";
    if ((x2-x1)*(y3-y1) == (x3-x1)*(y2-y1)) {
      cout << "not a triangle" << endl;
      continue;
    }
    bool obtuse = false, right = false, iso = false;
    for (int swp = 0; swp < 3; swp++) {
      int ln1 = (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1);
      int ln2 = (x3-x2)*(x3-x2) + (y3-y2)*(y3-y2);
      int ln3 = (x1-x3)*(x1-x3) + (y1-y3)*(y1-y3);
      if (ln3 > ln1 + ln2) obtuse = true;
      if (ln3 == ln1 + ln2) right = true;
      if (ln1 == ln2) iso = true;
      {int x = x1, y = y1; x1 = x2; y1 = y2; x2 = x3; y2 = y3; x3 = x; y3 = y;}
    }
    if (iso) cout << "isosceles "; else cout << "scalene ";
    if (right) cout << "right triangle" << endl;
    else if (obtuse) cout << "obtuse triangle" << endl;
    else cout << "acute triangle" << endl;
  }
}



===============================================================
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<string> VS;

vector<string> Tokenize(string s, string ch) {
  vector<string> ret;
  for (int p = 0, p2; p < s.size(); p = p2+1) {
    p2 = s.find_first_of(ch, p);
    if (p2 == -1) p2 = s.size();
    if (p2-p > 0) ret.push_back(s.substr(p, p2-p));
  }
  return ret;
}

vector<int> TokenizeInt(string s, string ch) {
  vector<int> ret;
  vector<string> p = Tokenize(s, ch);
  for( int i = 0; i < p.size(); i++ )
    ret.push_back(atoi(p[i].c_str()));
  return ret;
}

VS Pname;
VI Pc;


=========================================================
SNAPDRAGON sol to qual round 1st problem Search engines:

  int N, prob = 1;
  string s;
  getline(cin, s);
  for (N = atoi(s.c_str()); N--;) {
    getline(cin, s);
    Pname = Tokenize(s, " ");
    getline(cin, s);
    Pc = TokenizeInt(s, " ");
    int mn = 100;
    string mns = "";
    for (int i = 0; i < (1<<Pname.size()); i++) {
      int last = -1, j;
      int n = Pname.size();
      for (j = 0; j < Pc.size(); j++) if (!(i&(1<<j))) {
        if (Pc[j] <= last) break;
        n--;
        last = Pc[j];
      }
      if (j < Pc.size()) continue;
      if (n > mn) continue;
      VS v;
      for (j = 0; j < Pc.size(); j++) if (i&(1<<j)) v.push_back(Pname[j]);
      sort(v.begin(), v.end());
      s = "";
      for (j = 0; j < v.size(); j++) {
        if (j) s += " ";
        s += v[j];
      }
      if (n < mn || n == mn && s < mns) {
        mn = n; mns = s;
      }
    }
    cout << "Case #" << prob++ << ": " << mns << endl;

======================================================================

double nroute[51][51];
double doit(int x, int y) {
  double& ret = nroute[x][y];
  if (ret != 0) return ret;
  if (x == y) return ret = 1;
  for (int i = 0; i < R; i++) if (x == Rx[i] && rd[Rx[i]][Ry[i]] == Rd[i]) {
    if (Rd[i] + d[Ry[i]][y] == d[x][y]) {
      ret += doit(Ry[i], y);
    }
  }
  return ret;
}

main() {
  int N, prob = 1;
  string s;
  for(cin >> N; N--;) {
    cin >> R >> s;
    city.clear();
    get(s);
    memset(d, 60, sizeof(d));
    memset(rd, 60, sizeof(rd));
    memset(nr, 0, sizeof(R));
    Rx.clear(); Ry.clear(); Rd.clear();
    for (int i = 0; i < R; i++) {
      int x, y, ln;
      cin >> s; x = get(s);
      cin >> s; y = get(s);
      cin >> ln;
      Rx.push_back(x); Ry.push_back(y); Rd.push_back(ln);
      if (ln < rd[x][y]) {
        d[x][y] = rd[x][y] = ln;
        nr[x][y] = 1;
      } else if (ln == rd[x][y]) {
        nr[x][y]++;
      }
    }
    for (int i = 0; i < city.size(); i++) d[i][i] = 0;
    for (int k = 0; k < city.size(); k++)
    for (int i = 0; i < city.size(); i++)
    for (int j = 0; j < city.size(); j++)
      d[i][j] <?= d[i][k] + d[k][j];
    memset(nroute, 0, sizeof(nroute));
    int nreachable = 0;
    vector<double> Rp(R, 0.0);
    for (int dest = 0; dest < city.size(); dest++)
    if (dest != 0 && d[0][dest] < 100000000) {
      nreachable++;
      for (int i = 0; i < R; i++) if (rd[Rx[i]][Ry[i]] == Rd[i]) {
        if (d[0][Rx[i]] + Rd[i] + d[Ry[i]][dest] == d[0][dest]) {
          Rp[i] += doit(0, Rx[i]) * doit(Ry[i], dest) / doit(0, dest);
        }
      }
    }
    printf("Case #%d:", prob++);
    for (int i = 0; i < R; i++) printf(" %.7lf", Rp[i] / nreachable);
    printf("\n");
  }
}



===========================================================
#include <set>
#include <map>
#include <stack>
#include <list>
#include <queue>
#include <deque>
#include <cctype>
#include <string>
#include <vector>
#include <sstream>
#include <iterator>
#include <numeric>
#include <cmath>
using namespace std;

typedef vector <int > VI;
typedef vector < VI > VVI;
typedef long long LL;
typedef vector < LL > VLL;
typedef vector < double > VD;
typedef vector < string > VS;
typedef pair<int,int> PII;
typedef vector <PII> VPII;
typedef istringstream ISS;

#define ALL(x) x.begin(),x.end()
#define REP(i,n) for (int i=0; i<(n); ++i)
#define FOR(var,pocz,koniec) for (int var=(pocz); var<=(koniec); ++var)
#define FORD(var,pocz,koniec) for (int var=(pocz); var>=(koniec); --var)
#define FOREACH(it, X) for(__typeof((X).begin()) it = (X).begin(); it != (X).end(); ++it)
#define PB push_back
#define PF push_front
#define MP(a,b) make_pair(a,b)
#define ST first
#define ND second
#define SIZE(x) (int)x.size()

const int INF = 10*1000*1001;
==========================================================
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <queue>
 
using namespace std;
 
typedef long long LL;
typedef vector <int> vi;
typedef vector <LL> vll;
typedef vector <string> vs;
typedef vector <double> vd;

vs token(string s, string d)
{
	vs res;
	int pos;
	string t;
	while (true)
	{
		pos = s.find(d);
		if (pos == -1) break;
		t = s.substr(0,pos);
		s = s.substr(pos+d.length());
		if (t != "") res.push_back(t);
	}	
	if (s != "") res.push_back(s);
	return res;
}


vs token(string s)
{
	return token(s," ");
}
//////////////////////////

int tc, ntc;
char buf[100000];
vs names;
int n;
int guess[100];
bool used[100];

vs res;
int dp[100];
int lis()
{
	int i,j;
	int res = 0;
	for (i=0; i<n; i++) if (!used[i])
	{
		dp[i] = 1;
		for (j=0; j<i; j++) if (!used[j] && guess[j] < guess[i])
			dp[i] >?= dp[j] + 1;
		res >?= dp[i];
	}
	return res;
}

int main()
{
	scanf("%d",&ntc); gets(buf);
	int i, j;
	int mlis;
	int tmp;
	
	string minv;
	int tmin;
	
	for (tc = 1; tc<=ntc; tc++)
	{
		gets(buf);
		names = token(buf);
		n = names.size();
		
		for (i=0; i<n; i++) scanf("%d",&guess[i]); gets(buf);
		
		memset(used,0,sizeof(used));
		res.clear();
		mlis = lis();
		
		for (i=0; i<n-mlis; i++)
		{
			tmin = -1;
			minv = "";
			for (j=0; j<n; j++) if (!used[j])
			{
				used[j] = true;
				tmp = lis();
				used[j] = false;
				if (tmp == mlis)
				{
					if (tmin == -1 || names[j] < minv)
					{
						minv = names[j];
						tmin = j;
					}
				}
			}
			
			used[tmin] = true;
			res.push_back( names[tmin] );
		}
		
		sort(res.begin(), res.end());
		printf("Case #%d:",tc);
		for (i=0; i<res.size(); i++) printf(" %s",res[i].c_str());
		printf("\n");
	}
}

==================================================================================
#include <vector> 
#include <list> 
#include <map> 
#include <set> 
#include <deque> 
#include <queue> 
#include <stack> 
#include <bitset> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <utility> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <cctype> 
#include <string> 
#include <cstring> 
#include <ctime> 

using namespace std;

int s(int x1,int y1,int x2,int y2,int x3,int y3)
{
	return x1*y2+x2*y3+x3*y1-x1*y3-x2*y1-x3*y2;
}

int dis(int x1,int y1,int x2,int y2)
{
	return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);
}

int main()
{
	freopen("pa2.in","r",stdin);
	freopen("pa2.out","w",stdout);
	int i,j,l,t,x1,y1,x2,y2,x3,y3,l1,l2,l3;
	scanf("%d",&t);
	for (l=0;l<t;l++)
	{
		scanf("%d%d%d%d%d%d",&x1,&y1,&x2,&y2,&x3,&y3);
		printf("Case #%d: ",l+1);
		if (s(x1,y1,x2,y2,x3,y3)==0)
		{
			printf("not a triangle\n");
		}
		else
		{
			l1=dis(x1,y1,x2,y2);
			l2=dis(x1,y1,x3,y3);
			l3=dis(x2,y2,x3,y3);
			if ((l1==l2)||(l1==l3)||(l2==l3))
			{
				printf("isosceles ");
			}
			else
			{
				printf("scalene ");
			}
			if ((l1+l2<l3)||(l1+l3<l2)||(l2+l3<l1))
			{
				printf("obtuse ");
			}
			else if ((l1+l2==l3)||(l1+l3==l2)||(l2+l3==l1))
			{
				printf("right ");
			}
			else
			{
				printf("acute ");
			}
			printf("triangle\n");
		}
	}
	return 0;
}



=====================================================================================
#include <vector> 
#include <list> 
#include <map> 
#include <set> 
#include <deque> 
#include <queue> 
#include <stack> 
#include <bitset> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <utility> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <cctype> 
#include <string> 
#include <cstring> 
#include <ctime> 

using namespace std;

int solve(vector<int> a)
{
	int i,j,best;
	int d[100];
	best=0;
	for (i=0;i<a.size();i++)
	{
		d[i]=1;
		for (j=0;j<i;j++)
			if ((a[j]<a[i])&&(d[j]+1>d[i]))
				d[i]=d[j]+1;
		if (d[i]>best) best=d[i];
	}
	return best;
}

int main()
{
	freopen("pb2.in","r",stdin);
	freopen("pb2.out","w",stdout);
	int i,j,l,t,ans,p,bi;
	string ss,best;
	vector<string> a;
	vector<int> b,b1;
	char s[1000];
	scanf("%d",&t);
	gets(s);
	for (l=0;l<t;l++)
	{
		gets(s);
		ss=s;
		ss+=" ";
		a.clear();
		while (ss!="")
		{
			p=ss.find_first_of(' ');
			a.push_back(ss.substr(0,p));
			ss.erase(0,p+1);
		}
		gets(s);
		ss=s;
		ss+=" ";
		b.clear();
		while (ss!="")
		{
			p=ss.find_first_of(' ');
			b.push_back(atoi(ss.substr(0,p).c_str()));
			ss.erase(0,p+1);
		}
		if (a.size()!=b.size()) break;
		ans=solve(b);
		printf("Case #%d:",l+1);
		while (a.size()>ans)
		{
			best="";
			bi=-1;
			for (i=0;i<a.size();i++)
			{
				b1=b;
				b1.erase(b1.begin()+i);
				if (solve(b1)==ans)
				{
					if ((best=="")||(a[i]<best))
					{
						best=a[i];
						bi=i;
					}
				}
			}
			if (bi==-1) printf("!!!");
			printf(" %s",best.c_str());
			a.erase(a.begin()+bi);
			b.erase(b.begin()+bi);
		}
		printf("\n");
	}
	return 0;
}



===============================================================================
#define BEND(v) v.begin(),v.end()

const double eps = 1e-8;
int cas=0;
int lis(const vector<int>& xs) {
  vector<int> lis;

  FORI(i,xs) {
    vector<int>::iterator it = lower_bound(BEND(lis), xs[i]);
    if (it == lis.end()) lis.push_back(xs[i]);
    else *it = xs[i];
  }

  return lis.size();
}
void tests() {
  vector<int> xs;
  xs.push_back(1);
  xs.push_back(2);
  xs.push_back(3);
  assert(lis(xs) == 3);
  xs.push_back(3);
  assert(lis(xs) == 3);
  xs.push_back(4);
  assert(lis(xs) == 4);
}
void doit() {
  char buf[1024];
  scanf(" %[^\n]",buf);
  istringstream iss(buf);
  vector<string> ps;
  string p;
  while (iss >> p) ps.push_back(p);

  int P = ps.size();
  vector<int> xs;
  FOR(i,P) {
    int x; scanf("%d",&x);
    xs.push_back(x);
  }

  vector<string> ret;
  vector<string> sps = ps; sort(BEND(sps));
  FORI(i,sps) {
    int j=-1;
    FORI(k,ps) if (ps[k] == sps[i]) j = k;
    assert(j != -1);

    vector<int> xsp;
    vector<string> psp;
    FORI(k,xs) if (k != j) xsp.push_back(xs[k]);
    FORI(k,ps) if (k != j) psp.push_back(ps[k]);

    if (lis(xs) == lis(xsp)) {
      xs = xsp;
      ps = psp;
      ret.push_back(sps[i]);
    }
  }

  printf("Case #%d:",++cas);
  FORI(i,ret) printf(" %s",ret[i].c_str());
  printf("\n");
}
int main() {
  tests();
  int N;
  scanf("%d",&N);
  while (N --> 0) doit();
}

=================================================================================
/ BEGIN CUT HERE
// headers begin
// END CUT HERE
#include <cstdio>
// BEGIN CUT HERE
// headers end
// END CUT HERE

using namespace std;

// BEGIN CUT HERE
// helper functions begin
// END CUT HERE
template<typename T> inline T sqr( const T &a ) { return a*a; }
template <typename T> inline T cross_product( T ax, T ay, T bx, T by ) { return ax*by - ay*bx; }
// BEGIN CUT HERE
// helper functions end
// END CUT HERE

struct Point {
   int x, y;
};

typedef Point Vector;

Vector operator-(Vector v1, Vector v2) {
   return (Vector){v1.x-v2.x, v1.y-v2.y};
}

int cross_product(Vector v1, Vector v2) {
   return v1.x*v2.y - v1.y*v2.x;
}

int dot_product(Vector v1, Vector v2) {
   return v1.x*v2.x + v1.y*v2.y;
}

int sqrhypot(Point a, Point b) {
   return sqr(a.x-b.x) + sqr(a.y-b.y);
}

=============================================================================
// BEGIN CUT HERE
// helper functions begin
// END CUT HERE
#define repeat(n) for ( int repc = (n); repc > 0; --repc )
template<typename T, typename U> inline void relaxmin( T &res, const U &x ) { if ( x < res ) res = x; }
template<typename Set, typename Element> inline bool inset( const Set &S, const Element &E ) { return S.find(E) != S.end(); }
#define foreach(i,c) for ( typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i )
// BEGIN CUT HERE
// helper functions end
// END CUT HERE

#define MAX 105
#define INF 0x3f3f3f3f

int n, nedges;
map<string, int> idmap;

struct Edge { int a, b, w; };
vector<Edge> edges;

int getcity(string s) {
   if ( inset(idmap, s) ) return idmap[s];
   return idmap[s] = n++;
}

int shpath[MAX][MAX];
long long ways[MAX][MAX];

long long countways(int a, int b) {
   if ( a == b ) return 1;

   long long &ret = ways[a][b];
   if ( ret != -1 ) return ret;

   ret = 0;
   foreach(it, edges) {
      const Edge &e = *it;
      if ( e.a != a ) continue;
      if ( shpath[a][b] == e.w + shpath[e.b][b] ) {
         ret += countways(e.b, b);
      }
   }

   return ret;
}

FLOYD WArSHALL ALGO STARTS HERE
................

idmap.clear();
      edges.clear();
      memset( shpath, 0x3f, sizeof shpath );
      memset( ways, -1, sizeof ways );

      cin >> nedges;

      string tmp1;
      cin >> tmp1;
      int start = getcity(tmp1);

      repeat(nedges) {
         Edge e;
         string tmp2;
         cin >> tmp1 >> tmp2 >> e.w;
         e.a = getcity(tmp1);
         e.b = getcity(tmp2);
         edges.push_back(e);
         relaxmin( shpath[e.a][e.b], e.w );
      }

      for ( int i=0; i<n; ++i ) shpath[i][i] = 0;

      for ( int j=0; j<n; ++j ) {
         for ( int i=0; i<n; ++i )
            for ( int k=0; k<n; ++k )
               relaxmin( shpath[i][k], shpath[i][j] + shpath[j][k] );
      }

      vector<double> prob(nedges, 0.0);
      int denom = 0;
      for ( int end=0; end<n; ++end ) {
         if ( end == start ) continue;
         if ( shpath[start][end] == INF ) continue;
         ++denom;

         for ( int i=0; i<nedges; ++i ) {
            int a = edges[i].a, b = edges[i].b;
            if ( shpath[start][a] + edges[i].w + shpath[b][end] == shpath[start][end] ) {
               prob[i] += double( countways(start, a) ) * countways(b, end) / countways(start, end);
            }
         }
      }

      for ( int i=0; i<nedges; ++i ) {
         printf( " %.7f", prob[i] / denom );
      }
      printf( "\n" );
   }   

   return 0;
} 




===================================================================

int t;
int main()
{
freopen("B.in","r",stdin);
freopen("B.out","w",stdout);
    cin>>t;
    for (int i=1;i<=t && printf("Case #%d:",i);i++)
    {
        int i,j;
        string s;
        name.clear();
        while (true)
        {
            char ch;
            cin>>s;
            name.push_back(s);
            cin.get(ch);
            if (ch=='\n') break;
        }
        n=name.size();
        pi.resize(n);
        for (i=0;i<n;i++) pi[i]=i;
        for (i=0;i<n;i++)
        for (j=i+1;j<n;j++)
        if (name[pi[i]]>name[pi[j]]) swap(pi[i],pi[j]);
        a.resize(n);
        for (i=0;i<n;i++) cin>>a[i];
        maxlen=Max_Len(a);
        ans.clear();
        while (true)
        {
            vector<int>::iterator I;
            vector<string>::iterator S;

==============================================================================






#include <cstdio>
#include <string>

using namespace std;

long long to10(string s, string dig) {
	int b = dig.size();
	long long n = 0, d = 1;
	for (int i = s.size()-1; i >= 0; i--) {
		int p = dig.find(s[i]);
		n += d*p;
		d *= b;
	}
	return n;
}

string from10(long long i, string dig) {
	int b = dig.size();

	string r;
	while (i) {
		r += dig[i%b];
		i /= b;
	}
	reverse(r.begin(), r.end());
	return r;
}

int main(int argc, char **argv) {
	int N;

	scanf("%d", &N);
	for (int i = 0; i < N; i++) {
		char nm[50], d0[100], d1[100];
		scanf(" %49s %99s %99s", nm, d0, d1);
		long long n = to10(nm, d0);
		string r = from10(n, d1);
		printf("Case #%d: %s\n", i+1, r.c_str());
	}
	return 0;
}


================================================================
KRIJGERTJE

#include <cstdio>
#include <algorithm>
#include <string>
#include <cassert>
using namespace std;

#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define REP(i,n) FOR(i,0,n)
#define FORE(i,a,b) for(int i=(a);i<=(b);++i)
#define REPE(i,n) FORE(i,0,n)

typedef long long ll;

int nfrom,nto,ns,nt;
char s[100],t[100],from[100],to[100];
int val[256];


void run(int casenr) {
	scanf("%s%s%s",s,from,to);
	nfrom=strlen(from);
	nto=strlen(to);
	ns=strlen(s);
	memset(val,-1,sizeof(val)); REP(i,nfrom) val[from[i]]=i;
	ll x=0; REP(i,ns) { x=x*nfrom+val[s[i]]; assert(x<=1000000000); }
	nt=0; do { t[nt++]=to[x%nto]; x/=nto; } while(x>0);
	reverse(t,t+nt); t[nt]='\0';
	printf("Case #%d: %s\n",casenr,t);
}

int main() {
	int n; scanf("%d",&n); FORE(i,1,n) run(i);
}





#define int64 long long
#define ii pair<int,int>
#define vi vector<int>
#define mp make_pair
#define pb push_back
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v.size()))

using namespace std;

template<class T> T abs(T x){return x>0 ? x:(-x);}
template<class T> T sqr(T x){return x*x;}


#define int64 long long
#define ii pair<int,int>
#define vi vector<int>
#define mp make_pair
#define pb push_back
#define all(v) (v).begin(),(v).end()
#define sz(v) ((int)(v.size()))

using namespace std;

template<class T> T abs(T x){return x>0 ? x:(-x);}
template<class T> T sqr(T x){return x*x;}

int64 a[200][200];

int main()
{
	memset(a,0,sizeof(a));
	for(int i=1;i<200;i++){
		for(int j=1;j<200;j++){
			a[i][j]=a[i-1][j]+a[i-1][j-1]+1LL;
			a[i][j]=min(a[i][j],(1LL<<32LL));
		}
	}
/*	for(int i=0;i<200;i++){
		for(int j=0;j<200;j++)
			cout << a[i][j] << " ";
		cout << "\n";
	}*/
	int nc;
	cin >> nc;
	for(int ic=0;ic<nc;ic++){
		int f,d,b;
		cin >> f >> d >> b;
		printf("Case #%d: ",ic+1);
		int64 cur=a[d][b];
		if(cur>=(1LL<<32LL)) cur=-1;
		cout << cur << " ";
		int md=150,mb=150;
		for(int i=0;i<200;i++)
			for(int j=0;j<200;j++){
				if(a[i][j]>=f){
					if(i==d) mb=min(mb,j);
					if(j==b) md=min(md,i);
				}
			}
		cout << md << " " << mb << "\n";
	}
	return 0;
}



